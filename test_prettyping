#!/usr/bin/env python3

# Read parse_arguments() function to understand how this script works.
# Alternatively, run this script with --help.

import argparse
import os
import os.path
import shlex
import signal
import subprocess
import sys
import textwrap
import time

OPTIONS = None
COLOR_RESET = '\033[0m'
COLOR_RED = '\033[0;31m'
COLOR_GREEN = '\033[0;32m'
COLOR_YELLOW = '\033[0;33m'
COLOR_BLUE = '\033[0;34m'
COLOR_MAGENTA = '\033[0;35m'
COLOR_CYAN = '\033[0;36m'


def hr(text, char='-✂-', qty=10, color_set=COLOR_CYAN, color_reset=COLOR_RESET):
    '''Returns a string padded with <char> repeated <qty> times.

    Also adds TTY color escapes to the string.

    The name comes from HTML's <hr> element, which means horizontal rule.
    '''
    return '{pad} {color_set}{text}{color_reset} {pad}'.format(
        text=text, pad=(char * qty), color_set=color_set, color_reset=color_reset)


class TestDef():
    '''The definition of a test.'''

    def __init__(self, name, description, params, ping_output):
        assert isinstance(name, str)
        assert isinstance(description, str)
        assert isinstance(params, list)
        assert isinstance(ping_output, str)

        self.index = None
        self.name = name
        self.description = textwrap.dedent(description).strip()
        self.params = params
        self.ping_output = textwrap.dedent(ping_output).strip().splitlines()

    def emulate_ping(self):
        '''Emulate the behavior of a ping binary. (i.e. mocking)

        This will print predefined lines with pauses between them.
        It will also handle Ctrl+C correctly.
        '''
        i = iter(self.ping_output)
        try:
            for line in i:
                # The first character indicates the action.
                # : → Insert a pause and print nothing.
                # . → Insert a pause before printing the line.
                # | → Print the line without pausing.
                # ! → Print the line without pausing. Also marks the beginning
                #     of the text that is printed even after Ctrl+C is pressed.
                if line[0] == ':':
                    # Short, common pause.
                    time.sleep(OPTIONS.interval)
                else:
                    if line[0] == '.':
                        # Short, common pause.
                        time.sleep(OPTIONS.interval)
                    elif line[0] == '|' or line[0] == '!':
                        # No pause.
                        pass
                    else:
                        raise NotImplementedError('Character "{0}" is not recognized'.format(line[0]))
                    sys.stdout.write(line[1:] + '\n')
                    sys.stdout.flush()
        except KeyboardInterrupt:
            # Skip to the trailing section.
            trailing_found = False
            for line in i:
                if line[0] == '!':
                    trailing_found = True
                if trailing_found:
                    sys.stdout.write(line[1:] + '\n')
            sys.stdout.flush()

    def build_prettyping_cmdline(self):
        return [
            './prettyping',
            '--pingbin', os.path.abspath(sys.argv[0]),
            '--interval', str(OPTIONS.interval),
            '--emulate_ping', str(self.index) if self.index is not None else self.name,
            '--terminal',
        ]

    def run(self):
        '''Run the test

        This will call the prettyping executable with the correct parameters.
        '''

        print(hr('DESCRIPTION'))
        print('{color}Test #{index}:{reset} {name}'.format(
            index=self.index, name=self.name, color=COLOR_CYAN, reset=COLOR_RESET))
        print(self.description)

        cmdline = self.build_prettyping_cmdline()
        print(' '.join(shlex.quote(arg) for arg in cmdline))

        if OPTIONS.wait:
            sys.stdout.flush()
            input('Press Enter to begin the test.')

        prettyping = None
        try:
            print(hr('BEGIN'))
            sys.stdout.flush()
            prettyping = subprocess.Popen(cmdline)
            prettyping.wait()
        except KeyboardInterrupt:
            if prettyping:
                prettyping.wait()
        print(hr('END'))
        sys.stdout.flush()


# Note: In the tests below, the statistics are not accurate. They are not
# relevant to the tests anyway.
TEST_LIST = [
    TestDef(
        'Abrupt end of output',
        'prettyping should print the statistics and fix the cursor position.',
        [],
        '''
            |PING registro.br (200.160.2.3) 56(84) bytes of data.
            .64 bytes from registro.br (200.160.2.3): icmp_seq=1 ttl=56 time=25.5 ms
            .64 bytes from registro.br (200.160.2.3): icmp_seq=2 ttl=56 time=55.7 ms
            .64 bytes from registro.br (200.160.2.3): icmp_seq=3 ttl=56 time=75.2 ms
        ''',
    ),
    TestDef(
        'Missing first response, explicit',
        'Request timeout for the first response.',
        [],
        '''
            |PING registro.br (200.160.2.3) 56(84) bytes of data.
            .Request timeout for icmp_seq 1
            .64 bytes from registro.br (200.160.2.3): icmp_seq=2 ttl=56 time=25.5 ms
            .64 bytes from registro.br (200.160.2.3): icmp_seq=3 ttl=56 time=55.7 ms
            .64 bytes from registro.br (200.160.2.3): icmp_seq=4 ttl=56 time=75.2 ms
            !
            |--- registro.br ping statistics ---
            |4 packets transmitted, 3 received, 25% packet loss, time 2000ms
            |rtt min/avg/max/mdev = 36.750/38.535/40.048/1.360 ms
        ''',
    ),
    TestDef(
        'Missing first response, implicit',
        'Request timeout for the first response.',
        [],
        '''
            |PING registro.br (200.160.2.3) 56(84) bytes of data.
            :
            .64 bytes from registro.br (200.160.2.3): icmp_seq=2 ttl=56 time=25.5 ms
            .64 bytes from registro.br (200.160.2.3): icmp_seq=3 ttl=56 time=55.7 ms
            .64 bytes from registro.br (200.160.2.3): icmp_seq=4 ttl=56 time=75.2 ms
            !
            |--- registro.br ping statistics ---
            |4 packets transmitted, 3 received, 25% packet loss, time 2000ms
            |rtt min/avg/max/mdev = 36.750/38.535/40.048/1.360 ms
        ''',
    ),
    TestDef(
        'Linux ping, including domain name',
        'Missing responses are not printed in the Linux ping. prettyping should detect them.',
        [],
        '''
            |PING registro.br (200.160.2.3) 56(84) bytes of data.
            .64 bytes from registro.br (200.160.2.3): icmp_seq=1 ttl=56 time=25.5 ms
            .64 bytes from registro.br (200.160.2.3): icmp_seq=2 ttl=56 time=55.5 ms
            :
            .64 bytes from registro.br (200.160.2.3): icmp_seq=4 ttl=56 time=75.5 ms
            .64 bytes from registro.br (200.160.2.3): icmp_seq=5 ttl=56 time=99.5 ms
            !
            |--- registro.br ping statistics ---
            |5 packets transmitted, 4 received, 20% packet loss, time 2000ms
            |rtt min/avg/max/mdev = 36.750/38.535/40.048/1.360 ms
        ''',
    ),
    TestDef(
        'Linux ping, IPv4 address',
        'Pinging a host by IP instead of by name.',
        [],
        '''
            |PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
            .64 bytes from 8.8.8.8: icmp_seq=1 ttl=58 time=25.5 ms
            .64 bytes from 8.8.8.8: icmp_seq=2 ttl=58 time=55.0 ms
            :
            .64 bytes from 8.8.8.8: icmp_seq=4 ttl=58 time=75.0 ms
            .64 bytes from 8.8.8.8: icmp_seq=5 ttl=58 time=99.8 ms
            !
            |--- 8.8.8.8 ping statistics ---
            |5 packets transmitted, 4 received, 20% packet loss, time 3004ms
            |rtt min/avg/max/mdev = 14.831/17.375/21.520/2.528 ms
        ''',
    ),
    TestDef(
        'ping6 localhost',
        '',
        [],
        '''
            |PING localhost(ip6-localhost) 56 data bytes
            .64 bytes from ip6-localhost: icmp_seq=1 ttl=64 time=0.028 ms
            .64 bytes from ip6-localhost: icmp_seq=2 ttl=64 time=0.049 ms
            :
            .64 bytes from ip6-localhost: icmp_seq=4 ttl=64 time=0.046 ms
            .64 bytes from ip6-localhost: icmp_seq=5 ttl=64 time=0.059 ms
            !
            |--- localhost ping statistics ---
            |5 packets transmitted, 4 received, 20% packet loss, time 4999ms
            |rtt min/avg/max/mdev = 0.028/0.046/0.059/0.011 ms
        ''',
    ),
    TestDef(
        'ping6 ::1',
        'Pinging IPv6 localhost.',
        [],
        '''
            |PING ::1(::1) 56 data bytes
            .64 bytes from ::1: icmp_seq=1 ttl=64 time=0.107 ms
            .64 bytes from ::1: icmp_seq=2 ttl=64 time=0.043 ms
            :
            .64 bytes from ::1: icmp_seq=4 ttl=64 time=0.040 ms
            .64 bytes from ::1: icmp_seq=5 ttl=64 time=0.040 ms
            !
            |--- ::1 ping statistics ---
            |5 packets transmitted, 4 received, 20% packet loss, time 1999ms
            |rtt min/avg/max/mdev = 0.040/0.063/0.107/0.031 ms
        ''',
    ),
    TestDef(
        'oping IPv4 domain name',
        '',
        [],
        '''
            |PING registro.br (200.160.2.3) 56 bytes of data.
            .56 bytes from registro.br (200.160.2.3): icmp_seq=1 ttl=56 time=25.17 ms
            .56 bytes from registro.br (200.160.2.3): icmp_seq=2 ttl=56 time=55.63 ms
            .echo reply from registro.br (200.160.2.3): icmp_seq=3 timeout
            .56 bytes from registro.br (200.160.2.3): icmp_seq=4 ttl=56 time=75.30 ms
            .56 bytes from registro.br (200.160.2.3): icmp_seq=5 ttl=56 time=99.94 ms
            !
            |--- registro.br ping statistics ---
            |5 packets transmitted, 4 received, 20.00% packet loss, time 67.0ms
            |RTT[ms]: min = 15, median = 16, p(95) = 18, max = 18
        ''',
    ),
    TestDef(
        'oping IPv4 address',
        '',
        [],
        '''
            |PING 8.8.8.8 (8.8.8.8) 56 bytes of data.
            .56 bytes from 8.8.8.8 (8.8.8.8): icmp_seq=1 ttl=56 time=25.17 ms
            .56 bytes from 8.8.8.8 (8.8.8.8): icmp_seq=2 ttl=56 time=55.63 ms
            .echo reply from 8.8.8.8 (8.8.8.8): icmp_seq=3 timeout
            .56 bytes from 8.8.8.8 (8.8.8.8): icmp_seq=4 ttl=56 time=75.30 ms
            .56 bytes from 8.8.8.8 (8.8.8.8): icmp_seq=5 ttl=56 time=99.94 ms
            !
            |--- 8.8.8.8 ping statistics ---
            |5 packets transmitted, 4 received, 20.00% packet loss, time 67.0ms
            |RTT[ms]: min = 15, median = 16, p(95) = 18, max = 18
        ''',
    ),
]
TEST_DICT = None
TEST_NAMES = None


def parse_arguments():
    parser = argparse.ArgumentParser(
        description='prettyping testing tool',
        epilog=textwrap.dedent('''
        This tool serves two purposes:

        * Act as a user-friendly front-end for running predefined prettyping tests.
        * Emulate a mock ping implementation while running a predefined test.

        There is no automated check for test results. The testing is essentially
        visual, a human being looks at the behavior and checks if the prettyping
        behavior makes sense.
        '''),
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        '--emulate_ping',
        metavar='TEST_ID',
        action='store',
        type=str,
        help='Behaves as a mock version of ping.'
    )
    parser.add_argument(
        '-t', '--test',
        metavar='TEST_ID',
        action='store',
        type=str,
        help='The test to run.'
    )
    parser.add_argument(
        '-l', '--list',
        action='store_true',
        help='Lists all available tests.'
    )
    parser.add_argument(
        '-a', '--all',
        action='store_true',
        help='Runs all tests sequentially.'
    )
    parser.add_argument(
        '-i', '--interval',
        metavar='SECONDS',
        action='store',
        type=float,
        default=1,
        help='The sleep() interval before each line is printed.'
    )
    parser.add_argument(
        '-w', '--wait',
        action='store_true',
        help='Waits for input before running a test.'
    )
    args = parser.parse_args()
    return args


def preprocess_global_test_list():
    global TEST_LIST, TEST_DICT, TEST_NAMES
    TEST_NAMES = []
    TEST_DICT = {}
    for i, t in enumerate(TEST_LIST):
        # Tests can be referenced by name.
        TEST_DICT[t.name] = t
        TEST_NAMES.append(t.name)
        # Tests can also be referenced by number (zero-based index).
        t.index = i
        TEST_DICT[i] = t
        TEST_DICT[str(i)] = t


def raise_keyboard_interrupt(*args):
    raise KeyboardInterrupt()


def list_tests():
    for i, name in enumerate(TEST_NAMES):
        print('  {0}: {1}'.format(i, name))


def main():
    global OPTIONS
    OPTIONS = parse_arguments()

    preprocess_global_test_list()

    if OPTIONS.list:
        if OPTIONS.emulate_ping or OPTIONS.all or OPTIONS.test:
            print('Error: --list cannot be used together with --emulate_ping or --all or --test.')
            sys.exit(1)
        list_tests()
    elif OPTIONS.emulate_ping:
        if OPTIONS.all or OPTIONS.test:
            print('Error: --emulate_ping cannot be used together with --all or --test.')
            sys.exit(1)

        # KeyboardInterrupt seems to be raised only when in interactive shell.
        # If Python interpreter was launched by another script, then we need to
        # manually set a handler for SIGINT.
        # https://stackoverflow.com/questions/974189/how-to-send-a-sigint-to-python-from-a-bash-script
        signal.signal(signal.SIGINT, raise_keyboard_interrupt)

        TEST_DICT[OPTIONS.emulate_ping].emulate_ping()
    else:
        if OPTIONS.all and OPTIONS.test:
            print('Error: --all and --test cannot be used together.')
            sys.exit(1)

        if OPTIONS.test:
            TEST_DICT[OPTIONS.test].run()
        elif OPTIONS.all:
            for i in range(len(TEST_NAMES)):
                TEST_DICT[i].run()
        else:
            print('Available tests:')
            list_tests()
            print('Use --help to learn available options.')


if __name__ == '__main__':
	main()
